package entity.player;

import java.util.ArrayList;

import junit.framework.TestCase;
/**
 * Testing for the player.entity Bullpen class
 * @author Tesia Shizume (ttshiz@wpi.edu)
 */
public class BullpenTest extends TestCase {
	/** Pieces for use in testing */
	Piece verticalBar = new Piece(1,  new Square(0, 1), new Square(0, 2), new Square(0, 3), new Square(0, 4), new Square(0, 5) );
	Piece horizontalBar = new Piece(1,  new Square(1, 0), new Square(2, 0), new Square(3, 0), new Square(4, 0), new Square(5, 0) );
	ArrayList <Piece> pcs;
	Bullpen bp;

	protected void setUp() throws Exception {
		super.setUp();
		pcs = new ArrayList <Piece> ();
		pcs.add(verticalBar);
	}

	public void testBullpenArrayListOfPiecePiece() {
		bp = new Bullpen(pcs, verticalBar);
		assertTrue(bp.pieces.contains(verticalBar));
		assertTrue(bp.selectedPiece == verticalBar);
	}

	public void testBullpen() {
		bp = new Bullpen();
		assertTrue(bp.pieces.isEmpty());
		assertTrue(bp.selectedPiece == null);
	}

	public void testSetSelected() {
		bp = new Bullpen(pcs, verticalBar);
		assertTrue(bp.selectedPiece == verticalBar);
		
		bp.setSelected(verticalBar);
		assertTrue(bp.selectedPiece == verticalBar);
		
		bp.addPiece(horizontalBar);
		bp.setSelected(horizontalBar);
		assertTrue(bp.selectedPiece == horizontalBar);
		bp.removeSelected();
		assertTrue(bp.selectedPiece == null);
		
		// selected Piece can be not in the Bullpen
		bp.removePiece(horizontalBar);
		bp.setSelected(horizontalBar);
		assertTrue(bp.selectedPiece == horizontalBar);
		
	}

	public void testGetPieces() {
		bp = new Bullpen();
		assertTrue(bp.getPieces() == bp.pieces);
		
		bp = new Bullpen(pcs, verticalBar);
		assertTrue(bp.getPieces() == pcs);
	}

	public void testRemoveSelected() {
		bp = new Bullpen();
		bp.removeSelected();
		assertTrue(bp.selectedPiece == null);
		
		bp = new Bullpen(pcs, verticalBar);
		assertTrue(bp.selectedPiece == verticalBar);
		bp.removeSelected();
		assertTrue(bp.selectedPiece == null);
	}

	public void testAddPiece() {
		bp = new Bullpen();
		assertTrue(bp.pieces.isEmpty());
		assertTrue(bp.selectedPiece == null);
		
		bp.addPiece(horizontalBar);
		assertFalse(bp.pieces.isEmpty());
		assertTrue(bp.selectedPiece == null);
		assertTrue(bp.pieces.contains(horizontalBar));
		
		bp.addPiece(verticalBar);
		assertFalse(bp.pieces.isEmpty());
		assertTrue(bp.selectedPiece == null);
		assertTrue(bp.pieces.contains(horizontalBar));
		assertTrue(bp.pieces.contains(verticalBar));
	}

	public void testGetSelectedPiece() {
		bp = new Bullpen();
		assertTrue(bp.getSelectedPiece()==null);
		assertTrue(bp.selectedPiece == bp.getSelectedPiece());
		
		bp.addPiece(verticalBar);
		bp.setSelected(verticalBar);
		assertTrue(bp.selectedPiece == bp.getSelectedPiece());
		
		bp.addPiece(horizontalBar);
		bp.setSelected(horizontalBar);
		assertTrue(bp.selectedPiece == bp.getSelectedPiece());
		
		bp.removeSelected();
		assertTrue(bp.selectedPiece == bp.getSelectedPiece());
		assertTrue(bp.getSelectedPiece()==null);
	}

	public void testRemovePiece() {
		bp = new Bullpen();
		assertTrue(bp.pieces.isEmpty());
		assertTrue(bp.selectedPiece == null);
		
		bp.addPiece(horizontalBar);
		assertFalse(bp.pieces.isEmpty());
		assertTrue(bp.selectedPiece == null);
		assertTrue(bp.pieces.contains(horizontalBar));
		
		bp.addPiece(verticalBar);
		assertFalse(bp.pieces.isEmpty());
		assertTrue(bp.selectedPiece == null);
		assertTrue(bp.pieces.contains(horizontalBar));
		assertTrue(bp.pieces.contains(verticalBar));
		
		bp.removePiece(horizontalBar);
		assertFalse(bp.pieces.contains(horizontalBar));
		assertTrue(bp.pieces.contains(verticalBar));
		
		bp.removePiece(verticalBar);
		assertFalse(bp.pieces.contains(horizontalBar));
		assertFalse(bp.pieces.contains(verticalBar));
		
		boolean thrown = false;
		try {
			bp.removePiece(horizontalBar);
		} catch (RuntimeException e) {
			thrown = true;
		}
		  assertTrue(thrown);
	}

	public void testPiecesLeft() {
		bp = new Bullpen();
		assertTrue(bp.pieces.isEmpty());
		assertTrue(bp.piecesLeft() == 0);
		
		bp.addPiece(horizontalBar);
		assertFalse(bp.pieces.isEmpty());
		assertTrue(bp.piecesLeft() == 1);
		
		bp.addPiece(verticalBar);
		assertTrue(bp.piecesLeft() == 2);
		
		bp.removePiece(horizontalBar);
		assertTrue(bp.piecesLeft() == 1);
		
		bp.removePiece(verticalBar);
		assertTrue(bp.piecesLeft() == 0);
		assertTrue(bp.pieces.isEmpty());
	}

}
